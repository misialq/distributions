on:
  workflow_call:
    inputs:
      solved-environment-key:
        required: true
        type: string
      matrix-key:
        required: true
        type: string
      rebuilt-channel-key:
        required: true
        type: string
      patched-channel-key:
        required: true
        type: string
      distro-name:
        required: true
        type: string

env:
  matrix_path: './matrix'
  solved_environment_path: './env-file'
  patched_channel_path: './patched-channel'
  rebuilt_channel_path: './rebuilt-channel'

jobs:
  configure_matrix:
    name: 'Set up build matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.matrix-key }}
          path: '${{ env.matrix_path }}'

      - id: set-matrix
        run: |
          echo "matrix=$(cat ${{ env.matrix_path }}/retest_matrix.json)" >> $GITHUB_OUTPUT

  run_matrix:
    name: '${{ matrix.package }} (${{ matrix.os }})'
    needs: configure_matrix
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.configure_matrix.outputs.matrix) }}
        os: [ubuntu-latest, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: get environment path
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.solved-environment-key }}
          path: ${{ env.solved_environment_path }}

      - name: 'Fetch base channel with patches'
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patched-channel-key }}
          path: ${{ env.patched_channel_path }}

      - name: 'Fetch rebuilt channel'
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}

      - name: Maximize build space for linux
        shell: bash
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Removing unwanted software... "
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          echo "... done"

      - name: install environment
        id: env
        uses: qiime2/action-library-packaging/create-env@beta
        with:
          conda-prefix: './test-env'
          environment-file: ${{ env.solved_environment_path }}/${{ inputs.distro-name }}-${{ matrix.os == 'ubuntu-latest' && matrix.os || 'macos-latest' }}-conda.yml

      - name: run qiime info
        shell: bash
        run: |
          ${{ steps.env.outputs.conda-activate }}
          qiime info

      - name: 'collect package path'
        id: 'collect-package'
        uses: qiime2/action-library-packaging/collect-package@beta
        with:
          runner: ${{ matrix.os }}
          package: ${{ matrix.package }}
          channels: '["${{ env.rebuilt_channel_path }}", "${{ env.patched_channel_path }}"]'

      - name: 'run tests'
        uses: qiime2/action-library-packaging/test-package@beta
        with:
          conda-activate: ${{ steps.env.outputs.conda-activate }}
          package-path: ${{ steps.collect-package.outputs.path }}
